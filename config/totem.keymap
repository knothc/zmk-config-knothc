// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_38keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define XXX &none
#define TODO ___
#define ___ &trans

#define BASE 0
#define NAV 1
#define NUM 2
#define FUN 3 // TODO: Rename to SYM or similar
#define UTIL 4 // TODO: Use for function keys?

#include "combos.dtsi"

// Spanish keycode aliases
#define ES_MORD &kp GRAVE  // º
#define ES_1    &kp N1    // 1
#define ES_2    &kp N2    // 2
#define ES_3    &kp N3    // 3
#define ES_4    &kp N4    // 4
#define ES_5    &kp N5    // 5
#define ES_6    &kp N6    // 6
#define ES_7    &kp N7    // 7
#define ES_8    &kp N8    // 8
#define ES_9    &kp N9    // 9
#define ES_0    &kp N0    // 0
#define ES_QUOT &kp MINUS // '
#define ES_IEXL &kp EQUAL // ¡
#define ES_Q    &kp Q    // Q
#define ES_W    &kp W    // W
#define ES_E    &kp E    // E
#define ES_R    &kp R    // R
#define ES_T    &kp T    // T
#define ES_Y    &kp Y    // Y
#define ES_U    &kp U    // U
#define ES_I    &kp I    // I
#define ES_O    &kp O    // O
#define ES_P    &kp P    // P
#define ES_GRV  &kp LEFT_BRACKET // ` (dead)
#define ES_PLUS &kp RIGHT_BRACKET // +
#define ES_A    &kp A    // A
#define ES_S    &kp S    // S
#define ES_D    &kp D    // D
#define ES_F    &kp F    // F
#define ES_G    &kp G    // G
#define ES_H    &kp H    // H
#define ES_J    &kp J    // J
#define ES_K    &kp K    // K
#define ES_L    &kp L    // L
#define ES_NTIL &kp SEMICOLON // Ñ
#define ES_ACUT &kp SQT // ´ (dead)  ?????????
#define ES_CCED &kp NON_US_HASH // Ç
#define ES_LABK &kp BACKSLASH // <
#define ES_Z    &kp Z    // Z
#define ES_X    &kp X    // X
#define ES_C    &kp C    // C
#define ES_V    &kp V    // V
#define ES_B    &kp B    // B
#define ES_N    &kp N    // N
#define ES_M    &kp M    // M
#define ES_COMM &kp COMMA // ,
#define ES_DOT  &kp PERIOD  // .
#define ES_MINS &kp SLASH // - 

#define ES_FORD &kp LS(GRAVE) // ª
#define ES_EXLM &kp LS(N1)    // !
#define ES_DQUO &kp LS(N2)    // "
#define ES_BULT &kp LS(N3)    // ·
#define ES_DLR  &kp LS(N4)    // $
#define ES_PERC &kp LS(N5)    // %
#define ES_AMPR &kp LS(N6)    // &
#define ES_SLSH &kp LS(N7)    // /
#define ES_LPRN &kp LS(N8)    // (
#define ES_RPRN &kp LS(N9)    // )
#define ES_EQL  &kp LS(N0)    // =
#define ES_QUES &kp LS(MINUS) // ?
#define ES_IQUE &kp LS(EQUAL) // ¿
#define ES_CIRC &kp LS(LEFT_BRACKET)  // ^ (dead)
#define ES_ASTR &kp LS(RIGHT_BRACKET) // *
#define ES_DIAE &kp LS(SQT) // ¨ (dead)   ?????????????????????
#define ES_RABK &kp LS(BACKSLASH) // >
#define ES_SCLN &kp LS(COMMA) // ;
#define ES_COLN &kp LS(PERIOD)  // :
#define ES_UNDS &kp LS(SLASH) // _
#define ES_BSLS &kp RA(GRAVE) // (backslash)
#define ES_PIPE &kp RA(N1)    // |
#define ES_AT   &kp RA(N2)    // @
#define ES_HASH &kp RA(N3)    // #
#define ES_TILD &kp RA(N4)    // ~
#define ES_EURO &kp RA(N5)    // €
#define ES_NOT  &kp RA(N6)    // ¬
#define ES_LBRC &kp RA(LEFT_BRACKET)  // [
#define ES_RBRC &kp RA(RIGHT_BRACKET) // ]
#define ES_LCBR &kp RA(SQT) // {   ??????????????????
#define ES_RCBR &kp RA(NON_US_HASH) // }

// navigation bindings for back/forward and prev tab/next tab
#define BACK &kp LG(LBKT)
#define FWD &kp LG(RBKT)

// hyper and meh keys
#define HYP LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))

/* ------------------------ general config ----------------------- */

#define QUICK_TAP_MS 175

// smart-layer config
&caps_word {  
    // /delete-property/ ignore-modifiers; // mods deactivate, requires PR #1451
    /delete-property/ ignore-numbers;
    continue-list = <BACKSPACE ENTER DELETE UNDERSCORE MINUS>;
};

// key-repeat config
&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; // repeat all keys
};

// sticky key aka 'one-shot mods'
&sk {
    release-after-ms = <2000>;
    quick-release;
};

// default layer-tap config
&lt {  
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// special HRMs for the right meh key, as it involves a modmorph
MAKE_HRM(hmr_meh, &kp, &comma_morph, KEYS_L THUMBS)
// MAKE_HRM(hmr_lpar, &kp, &lpar, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar, &kp, &rpar, KEYS_L THUMBS)    // "    "   "   "

// mod_morph keys
// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: comma | shift + tap: semicolon 
ZMK_BEHAVIOR(comma_morph, mod_morph,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: dot | shift + tap: colon 
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/ {
// TODO: Add hyper key as HRM
    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q         &kp W         &kp E            &kp R            &kp T              &kp Y         &kp U          &kp I              &kp O         &kp P 
            &lt NAV A     &hml LCTRL S  &hml LALT D      &hml LGUI F      &kp G              &kp H         &hmr RGUI J    &hmr LALT K        &hmr LCTRL L  &hmr LSHFT SEMICOLON
 &kp TAB    &hml LSHFT Z  &kp X         &hml MEH C       &hml HYP V       &kp B              &kp N         &hmr HYP M     &hmr_meh MEH COMMA &kp PERIOD    &kp SLASH                   &kp TAB
                                        &lt UTIL ESC     &kp LGUI    &lt FUN TAB             &lt NUM SPACE &kp RET        &lt FUN BSPC
            >;
        };
        nav_layer { 
            bindings = <
            ___          ___          ___             ___             ___                ___           &kp HOME          &kp UP          &kp END       &kp PAGE_UP
            &kp LCTRL     &kp LALT     &kp LGUI       &kp LSHFT       ___                ___           &kp LEFT          &kp DOWN        &kp RIGHT     &kp PAGE_DOWN
    BACK    ___           ___          &kp MEH         &kp HYP         ___                ___          &kp TILDE         ___             &kp FSLH      ___             FWD
                                       ___            ___             ___                &kp RET       &kp BSPC          &kp DEL
            >;
        }; 
        num_layer {
            bindings = <
            &kp PLUS     &kp C_PREV &kp C_PP      &kp C_NEXT     &kp STAR       ___           &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE  &kp DEL
            &kp N1       &kp N2     &kp N3        &kp N4         &kp N5         &kp N6        &kp N7        &kp N8        &kp N9      &kp N0 &kp LPAR  &kp MINUS    &kp N1     &kp N2        &kp N3         &kp FSLH       ___           &kp HYP       &kp MEH       ___         ___       &kp RPAR
                                    ___           &kp DOT        &kp SEMI       ___           ___           ___
            >;
        };
        fun_layer {
          bindings = <
            ES_AT        ES_QUOT    &kp LBKT      &kp SQT        ES_PLUS        ES_PIPE       ES_LCBR       ES_RCBR       ES_EQL      &kp BSPC
            ___          ES_DQUO    ES_HASH       ES_DLR         ES_PERC        ES_AMPR       ES_LPRN       ES_RPRN       ES_SLSH     &kp RET
      ___   ES_AT        ES_MINS    GRAVE       ES_MINS        ES_MINS        ES_MINS       ES_MINS       ES_MINS       ES_MINS     ES_MINS    ___
                                    ___           &kp DOT        &kp SEMI       ___           ___           ___
            >;
        };
        util_layer {
            bindings = <
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2    &bt BT_CLR      ___                ___           ___               &kp C_VOL_UP    ___           ___
            &kp LCTRL     &kp LALT     &kp LGUI       &kp LSHFT      ___                ___           ___                &kp C_VOL_DN    ___           ___ 
    ___     ___          ___          ___             &kp HYP        ___                ___           ___               ___             ___           ___             ___
                                      ___             ___             ___                ___           ___               &kp C_MUTE
            >;
        };  
    };
};
    
/* --------------------------------- combos --------------------------------- */
/*
   ╭────────────────────┬────────────────────╮     ╭─────────────────────┬─────────────────────╮
   │  0   1   2   3   4 │  5   6   7   8   9 │     │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
   │ 10  11  12  13  14 │ 15  16  17  18  19 │     │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  20 21  22  23  24  25 │ 26  27  28  29  30 31  LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5
   ╰───────╮ 32  33  34 │ 35  36  37 ╭───────╯     ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
           ╰────────────┴────────────╯                     ╰─────────────┴─────────────╯             */
// use global-quick-tap-ms for combos (requires PR 1387)
